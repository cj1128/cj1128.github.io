<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web2.0 on CJ Ting&#39;s Blog</title>
    <link>http://cjting.me/web2.0/</link>
    <description>Recent content in Web2.0 on CJ Ting&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 18 May 2017 22:33:20 +0800</lastBuildDate>
    
	<atom:link href="http://cjting.me/web2.0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>图床on七牛，简单好用的图床插件</title>
      <link>http://cjting.me/web2.0/build-an-img-bed-on-qiniu/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>http://cjting.me/web2.0/build-an-img-bed-on-qiniu/</guid>
      <description>&lt;p&gt;最近在使用过程中发现&lt;strong&gt;图床on微博&lt;/strong&gt;出了点问题，响应体的JSON解析错误，不用想都知道肯定是微博修改了响应体的数据结构（微博图片上传接口响应体是html tag和json混在一起，十分专业）。简单修复了一下，测试的时候却发现，微博的图片上传接口变得不再稳定了，经常404。看来微博图床是不能用了，正好我早就觉得微博不是个好图床。缺点如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;经常性的要重新登陆，麻烦死了&lt;/li&gt;
&lt;li&gt;无法获取到完整的上传图片列表&lt;/li&gt;
&lt;li&gt;无法删除上传的图片&lt;/li&gt;
&lt;li&gt;服务状态不可控，指不定什么时候接口就不能用了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用SVG Morphing制作自己的加载动画</title>
      <link>http://cjting.me/web2.0/make-loading-animation-with-svg-morphing/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0800</pubDate>
      
      <guid>http://cjting.me/web2.0/make-loading-animation-with-svg-morphing/</guid>
      <description>&lt;p&gt;每一个需要让用户等待的应用都应该有加载界面，可以是简单的文本，比如&lt;code&gt;加载中…&lt;/code&gt;，也可以是有趣的动画。当然，一个好玩的加载动画能够大大增加用户等待的耐心，谁喜欢枯燥的文字呢。所以，投入点时间寻找或者制作一个加载动画是很有意义的。感谢SVG和相关的动画技术，现在制作一款复杂的动画已经变得十分容易了。&lt;/p&gt;

&lt;p&gt;这里我使用SVG的形变技术(Shape Morphing)来做一个简单的矩形、三角形、圆形变换的动画。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从零开始搭建一个HTTPS网站</title>
      <link>http://cjting.me/web2.0/build-a-https-site-from-scratch/</link>
      <pubDate>Mon, 05 Sep 2016 00:00:00 +0800</pubDate>
      
      <guid>http://cjting.me/web2.0/build-a-https-site-from-scratch/</guid>
      <description>&lt;p&gt;我们都知道HTTP是非常不安全的，不安全的根源在于HTTP是明文传输。你在谷歌搜索了一个关键词（假设Google使用HTTP），HTTP数据包从你的计算机传送到服务器的过程中，中间经过的任意一个设备都可以轻松解析你的数据包，获取你的关键词，你的隐私毫无保障。&lt;/p&gt;

&lt;p&gt;你的信息被人获取只是明文传输的其中一个问题。总体来说，明文传输有三个问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;窃听：第三方可以获取你的信息。&lt;/li&gt;
&lt;li&gt;篡改：第三方可以修改你的信息。&lt;/li&gt;
&lt;li&gt;冒充：第三方可以冒充你的身份。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Webpack Long Term Caching 101</title>
      <link>http://cjting.me/web2.0/webpack-long-term-caching-101/</link>
      <pubDate>Sat, 25 Jun 2016 00:00:00 +0800</pubDate>
      
      <guid>http://cjting.me/web2.0/webpack-long-term-caching-101/</guid>
      <description>&lt;p&gt;缓存是Web中无法回避的话题，不仅因为缓存非常重要，能极大地改善用户体验，而且因为缓存很难做好。一旦生产环境出现了缓存失效，那就是一个十分棘手的问题。&lt;/p&gt;

&lt;p&gt;在各种缓存的方案中，基于hash的Long Term Caching（永久缓存）在我看来是最简单也是最高效。每一个资源名称上都带有自身内容的hash值，然后全部设置为永久缓存永不过期。所有资源的索引文件全部设置为永不缓存。这样就保证了当资源更新时，资源名称会变化，索引文件会引入新的资源名称，也就保证了缓存永远不会失效。&lt;/p&gt;

&lt;p&gt;这个处理方案显然和前端自身的编码没有关系，而是需要打包工具的支持。以下我们就用webapck为例，详细讲述怎样一步步实现Long Term Caching。项目最终的仓库&lt;a href=&#34;https://github.com/fate-lovely/long-term-caching-demo.git&#34;&gt;long-term-caching-demo&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>编写第一个Chrome插件——图床on微博</title>
      <link>http://cjting.me/web2.0/first-chrome-extension-image-bed-on-weibo/</link>
      <pubDate>Wed, 06 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>http://cjting.me/web2.0/first-chrome-extension-image-bed-on-weibo/</guid>
      <description>&lt;p&gt;之前写博客需要的图片全部都是本地存储，非常麻烦。流程如下：先用截图工具截图（QQ截图就很好用），然后移动到目标文件夹，然后在markdown中输入绝对路径（jekyll生成站点以后路径会变化，所以不能使用相对路径）。除了麻烦以外，在markdown中编写时还是看不到图的，因为路径不对。&lt;/p&gt;

&lt;p&gt;上次花点时间把所有的图片全部迁移到微博图床了。在chrome web store中搜索了一下，选了&lt;a href=&#34;https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?utm_source=chrome-ntp-icon&#34;&gt;新浪微博图床&lt;/a&gt;。功能是可以用的，不过有一些问题，最让我无法忍受的就是一点击按钮就会弹出一个chrome的空白窗口，无法关闭，只有重启chrome才行，这个实在是忍无可忍。&lt;/p&gt;

&lt;p&gt;闲话不说了，总之我发现这是一次绝佳的自己造轮子的机会。自己造自己用多好玩，所以我准备自己写一个chrome 插件，来实现微博图床的功能。起什么名字好呢，恩，这真是一个世界难题。想了半天，决定叫做“图床on微博”吧，是的，我是RoR粉丝。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Functional Reactive Programming 简介</title>
      <link>http://cjting.me/web2.0/intruduction-to-functional-reactive-programming/</link>
      <pubDate>Sun, 20 Mar 2016 00:00:00 +0800</pubDate>
      
      <guid>http://cjting.me/web2.0/intruduction-to-functional-reactive-programming/</guid>
      <description>&lt;p&gt;推荐阅读：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=XRYN2xt11Ek&#34;&gt;Netflix JavaScript Talks - Async JavaScript with Reactive Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&#34;&gt;The introduction to Reactive Programming you&amp;rsquo;ve been missing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML5Rocks有一篇关于&lt;a href=&#34;http://www.html5rocks.com/en/tutorials/es6/promises/&#34;&gt;Promise&lt;/a&gt;的经典文章，通过引入这样一个问题来说明Promise的优越性。问题如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我们需要渲染一个故事，首先我们获取故事的json，渲染标题(story.heading)，然后再根据其中的charpter url，获取每一章的内容，并显示。中间出了任何问题，显示错误信息。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript Infinite Currying</title>
      <link>http://cjting.me/web2.0/javascript-infinite-currying/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0800</pubDate>
      
      <guid>http://cjting.me/web2.0/javascript-infinite-currying/</guid>
      <description>&lt;p&gt;很久之前曾看到一个很有意思的JS问题，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 定义一个函数add，满足如下性质：
add(1) == 1
add(1)(2) == 3
add(1)(2)(3) == 6
...

var g = add(1)(2)
g(100) == 103
g(200) == 203
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Browserify &#43; SASS &#43; BrowserSync &#43; Gulp高效前端开发环境配置</title>
      <link>http://cjting.me/web2.0/frontend-development-with-browserify-sass-browsersync-gulp/</link>
      <pubDate>Thu, 24 Sep 2015 00:00:00 +0800</pubDate>
      
      <guid>http://cjting.me/web2.0/frontend-development-with-browserify-sass-browsersync-gulp/</guid>
      <description>&lt;p&gt;之前开发的前端应用都是些比较简单的页面，开发的时候一般就是sublime，然后命令行里面启动&lt;code&gt;sass --watch&lt;/code&gt; 以及 &lt;code&gt;coffee --watch&lt;/code&gt; 就行了，修改代码以后自动编译，但是浏览器需要手动刷新。凑合着也能用，所以也就一直这样没有去理会别的解决方案了。&lt;/p&gt;

&lt;p&gt;工作了以后，编写的应用规模变大了很多，而且前端的依赖也变得复杂了。传统的方式显然是解决不了问题的。这段时间，我一直在寻找一套高效的开发环境，要求如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用CommonJS进行依赖引用&lt;/li&gt;
&lt;li&gt;ES6支持&lt;/li&gt;
&lt;li&gt;React + JSX支持&lt;/li&gt;
&lt;li&gt;SASS支持&lt;/li&gt;
&lt;li&gt;修改以后自动高速编译，即便是很大的依赖&lt;/li&gt;
&lt;li&gt;修改JS、HTML以后浏览器自动刷新&lt;/li&gt;
&lt;li&gt;修改CSS浏览器使用Style Injection刷新&lt;/li&gt;
&lt;li&gt;生产环境下合并压缩&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于disqus的作用原理</title>
      <link>http://cjting.me/web2.0/how-disqus-work/</link>
      <pubDate>Thu, 21 Nov 2013 00:00:00 +0800</pubDate>
      
      <guid>http://cjting.me/web2.0/how-disqus-work/</guid>
      <description>&lt;p&gt;当初用jekyll-bootstrap做博客的时候,里面默认配置了disqus的评论模块.当初懵懵懂懂,去disqus官网按照提示填了字段以后,然后根据jekyll配置文件&lt;code&gt;_config.yml&lt;/code&gt;里面的字段&lt;code&gt;short-name&lt;/code&gt;填了一下,然后评论模块就可以用了.我心里一直觉得不能理解,但是心里觉得可能很麻烦,就一直没有去钻研这个事情,今天有空,耐心看了官方文档,一切豁然开朗.&lt;/p&gt;

&lt;p&gt;当初对disqus的了解,就是一个&lt;strong&gt;云端评论中心&lt;/strong&gt;.可以将你对一篇文章的评论存储在disqus的中心,然后通过js脚本调用这些评论.但是,我困惑的问题就是:&lt;strong&gt;disqus怎样将评论和相应的页面进行绑定?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用CSS绘制Ruby可爱的红宝石标志</title>
      <link>http://cjting.me/web2.0/draw-ruby-logo-with-css/</link>
      <pubDate>Sun, 23 Jun 2013 00:00:00 +0800</pubDate>
      
      <guid>http://cjting.me/web2.0/draw-ruby-logo-with-css/</guid>
      <description>&lt;p&gt;有一次偶然逛Dribbble，发现了这个可爱的红宝石标志。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww3.sinaimg.cn/large/9b85365djw1f23bofx48nj20j1084a9z.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ruby的标志本来就很好看，加上这个配色，更加好看了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用github pages搭建自己的个人博客</title>
      <link>http://cjting.me/web2.0/build-blog-with-github-pages/</link>
      <pubDate>Mon, 10 Jun 2013 00:00:00 +0800</pubDate>
      
      <guid>http://cjting.me/web2.0/build-blog-with-github-pages/</guid>
      <description>&lt;p&gt;很早之前就想写这篇文章，无奈因为一些事情，一直耽误到今天。&lt;/p&gt;

&lt;p&gt;这个学期学了rails以后，早就萌生了建立自己的个人网站的想法。无奈rails学的不精，本来打算学通rails以后再买主机建站的。后来Google个人博客的时候，发现了&lt;strong&gt;github pages&lt;/strong&gt;这样一个好东西。可以免去你管理网站的麻烦，真实喜从天降。&lt;/p&gt;

&lt;p&gt;管理网站确实麻烦无比。我想建立个人网站，最主要的目的也是为了写博文，记录生活与技术上的点滴发现。github pages完美满足了我的这个要求。下面详细来说建站步骤。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>