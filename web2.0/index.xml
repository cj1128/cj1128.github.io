<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web2.0 on CJ&#39;s Blog</title>
    <link>https://cjting.me/web2.0/</link>
    <description>Recent content in Web2.0 on CJ&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 18 May 2017 22:33:20 +0800</lastBuildDate>
    
	<atom:link href="https://cjting.me/web2.0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从图片优化说起</title>
      <link>https://cjting.me/2019/07/29/image-optimization/</link>
      <pubDate>Mon, 29 Jul 2019 14:52:50 +0800</pubDate>
      
      <guid>https://cjting.me/2019/07/29/image-optimization/</guid>
      <description>&lt;p&gt;图片是大部分网页的重要组成部分，一般情况下，我们不会太关注这方面的问题，需要显示图片直接一个 &lt;code&gt;img&lt;/code&gt; 标签搞定。&lt;/p&gt;

&lt;p&gt;但实际上，无论是对于提高加载速度，还是对于优化用户体验，优化图片都是一个重要的手段。&lt;/p&gt;

&lt;p&gt;图片优化分成两个方面：&lt;/p&gt;

&lt;p&gt;第一，图片压缩。在保证视觉效果的情况下，减少图片的体积。这个很有效，1M 和 100K 的图片，肉眼看起来几乎差不多，但却省了 90% 的流量，大大提高了加载速度。&lt;/p&gt;

&lt;p&gt;第二，响应式图片。根据客户端的情况，选择最合适的图片返回给用户。用户是一个 500px 的设备，那么返回 1000px 的图给他就是浪费（假设物理像素和 CSS 像素是一比一）。&lt;/p&gt;

&lt;p&gt;我们先来看图片压缩。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript 与 Unicode</title>
      <link>https://cjting.me/2018/07/22/js-and-unicode/</link>
      <pubDate>Sun, 22 Jul 2018 09:45:12 +0800</pubDate>
      
      <guid>https://cjting.me/2018/07/22/js-and-unicode/</guid>
      <description>&lt;p&gt;字符串是任何一个编程语言中的重要概念，同时也是一个非常复杂的问题。&lt;/p&gt;

&lt;p&gt;日常编码中可能并不一定能见到它的复杂性，下面是几个字符串操作，使用你最熟悉的编程语言，看看结果如何。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;逆转字符串 &lt;code&gt;&amp;quot;noël&amp;quot;&lt;/code&gt;，正确结果应该是 &lt;code&gt;&amp;quot;lëon&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取字符串 &lt;code&gt;&amp;quot;noël&amp;quot;&lt;/code&gt; 前三个字符，正确结果应该是 &lt;code&gt;&amp;quot;noë&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取字符串 &lt;code&gt;&amp;quot;😸😾&amp;quot;&lt;/code&gt; 的长度，正确答案应该是 2&lt;/li&gt;
&lt;li&gt;字符串 &lt;code&gt;&amp;quot;noël&amp;quot;&lt;/code&gt; 和字符串 &lt;code&gt;&amp;quot;noël&amp;quot;&lt;/code&gt; 规整化以后应该相等（他们看起来一样，但是内部表示不一样，一个 6 字节，一个 5 字节，这里涉及到 Unicode 的规整化）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于大部分编程语言，包括 Ruby，Python，JS，C#，Java 等，上面的问题都无法全部返回正确结果（但是，拥有超强 Unicode 支持的 &lt;a href=&#34;https://elixir-lang.org/&#34;&gt;Elixir&lt;/a&gt; 可以）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DNS 101</title>
      <link>https://cjting.me/2018/05/01/dns-101/</link>
      <pubDate>Tue, 01 May 2018 15:32:08 +0800</pubDate>
      
      <guid>https://cjting.me/2018/05/01/dns-101/</guid>
      <description>&lt;p&gt;DNS 全称 &lt;code&gt;Domain Name System&lt;/code&gt;，是我们每天都在使用的基础互联网设施。&lt;/p&gt;

&lt;p&gt;它被发明出来的原因很简单，计算机之间的通信用的是 IP 地址，是一串数字，人类记忆起来十分不方便，因此，我们给地址起个名字，然后将名字和 IP 之间的关系记录起来，这样，我们只用记住名字就行了。&lt;/p&gt;

&lt;p&gt;从上面可以看出，DNS 系统类似我们日常使用的电话本，只不过里面存储的是域名和 IP 之间的关系。和人与电话之间的关系一样，一个域名可以有多个 IP，一个 IP 也可以有多个域名。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTP Basic Auth 是怎么样工作的</title>
      <link>https://cjting.me/2018/03/31/how-http-basic-auth-work/</link>
      <pubDate>Sat, 31 Mar 2018 19:40:48 +0800</pubDate>
      
      <guid>https://cjting.me/2018/03/31/how-http-basic-auth-work/</guid>
      <description>&lt;p&gt;&lt;code&gt;HTTP Basic Auth&lt;/code&gt; 是 HTTP 提供的一种验证方式，因为明文传输用户名和密码，非 HTTPS 环境下很不安全，一般用的非常少。但是在某些情况下用一用还是非常方便的，比如，一些静态站点例如文档系统可以使用 HTTP Basic Auth 进行简单的权限验证。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>图床on七牛，简单好用的图床插件</title>
      <link>https://cjting.me/2017/01/23/build-an-img-bed-on-qiniu/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2017/01/23/build-an-img-bed-on-qiniu/</guid>
      <description>&lt;p&gt;注：因为七牛 API 修改，编辑于 2019-03-25T16:20:00。&lt;/p&gt;

&lt;p&gt;最近在使用过程中发现 &lt;strong&gt;图床on微博&lt;/strong&gt; 出了点问题，响应体的 JSON 解析错误，不用想都知道肯定是微博修改了响应体的数据结构（微博图片上传接口响应体是 html 和 json 混在一起，十分专业）。简单修复了一下，测试的时候却发现，微博的图片上传接口变得不再稳定了，经常 404。看来微博图床是不能用了，正好我早就觉得微博不是个好图床，缺点如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;经常性的要重新登陆，麻烦死了&lt;/li&gt;
&lt;li&gt;无法获取到完整的上传图片列表&lt;/li&gt;
&lt;li&gt;无法删除上传的图片&lt;/li&gt;
&lt;li&gt;服务状态不可控，指不定什么时候接口就不能用了&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>使用 SVG Morphing 制作自己的加载动画</title>
      <link>https://cjting.me/2016/11/07/make-loading-animation-with-svg-morphing/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2016/11/07/make-loading-animation-with-svg-morphing/</guid>
      <description>&lt;p&gt;每一个需要让用户等待的应用都应该有加载界面，可以是简单的文本，比如 &lt;code&gt;加载中…&lt;/code&gt;，也可以是有趣的动画。当然，一个好玩的加载动画能够大大增加用户等待的耐心，谁喜欢枯燥的文字呢。所以，投入点时间寻找或者制作一个加载动画是很有意义的。感谢 SVG 和相关的动画技术，现在制作一款复杂的动画已经变得十分容易了。&lt;/p&gt;

&lt;p&gt;这里我使用 SVG 的形变技术（Shape Morphing）来做一个简单的矩形、三角形、圆形变换的动画。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从零开始搭建一个 HTTPS 网站</title>
      <link>https://cjting.me/2016/09/05/build-a-https-site-from-scratch/</link>
      <pubDate>Mon, 05 Sep 2016 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2016/09/05/build-a-https-site-from-scratch/</guid>
      <description>&lt;p&gt;我们都知道 HTTP 是非常不安全的，不安全的根源在于 HTTP 是明文传输。你在谷歌搜索了一个关键词（假设 Google 使用 HTTP），HTTP 数据包从你的计算机传送到服务器的过程中，中间经过的任意一个设备都可以轻松解析你的数据包，获取你的关键词，你的隐私毫无保障。&lt;/p&gt;

&lt;p&gt;你的信息被人获取只是明文传输的其中一个问题。总体来说，明文传输有三个问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;窃听：第三方可以获取你的信息&lt;/li&gt;
&lt;li&gt;篡改：第三方可以修改你的信息&lt;/li&gt;
&lt;li&gt;冒充：第三方可以冒充你的身份&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>编写第一个 Chrome 插件 —— 图床on微博</title>
      <link>https://cjting.me/2016/04/06/first-chrome-extension-image-bed-on-weibo/</link>
      <pubDate>Wed, 06 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2016/04/06/first-chrome-extension-image-bed-on-weibo/</guid>
      <description>&lt;p&gt;之前写博客需要的图片全部都是本地存储，非常麻烦。流程如下：先用截图工具截图（QQ 截图就很好用），然后移动到目标文件夹，然后在 Markdown 中输入绝对路径（Jekyll 生成站点以后路径会变化，所以不能使用相对路径）。除了麻烦以外，在 Markdown 中编写时还是看不到图的，因为路径不对。&lt;/p&gt;

&lt;p&gt;上次花点时间把所有的图片全部迁移到微博图床了。在 Chrome Web Store 中搜索了一下，选了&lt;a href=&#34;https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?utm_source=chrome-ntp-icon&#34;&gt;新浪微博图床&lt;/a&gt;。功能是可以用的，不过有一些问题，最让我无法忍受的就是一点击按钮就会弹出一个 Chrome 的空白窗口，无法关闭，只有重启 Chrome 才行，这个实在是忍无可忍。&lt;/p&gt;

&lt;p&gt;闲话不说了，总之我发现这是一次绝佳的自己造轮子的机会。自己造自己用多好玩，所以我准备自己写一个 Chrome 插件，来实现微博图床的功能。起什么名字好呢，恩，这真是一个世界难题。想了半天，决定叫做“图床on微博”吧，是的，我是 RoR 粉丝。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Functional Reactive Programming 简介</title>
      <link>https://cjting.me/2016/03/20/intruduction-to-functional-reactive-programming/</link>
      <pubDate>Sun, 20 Mar 2016 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2016/03/20/intruduction-to-functional-reactive-programming/</guid>
      <description>&lt;p&gt;推荐阅读：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=XRYN2xt11Ek&#34;&gt;Netflix JavaScript Talks - Async JavaScript with Reactive Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&#34;&gt;The introduction to Reactive Programming you&amp;rsquo;ve been missing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML5Rocks 有一篇关于 &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/es6/promises/&#34;&gt;Promise&lt;/a&gt; 的经典文章，通过引入这样一个问题来说明 Promise 的优越性，问题如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我们需要渲染一个故事，首先我们获取故事的 json，渲染标题 (story.heading)，然后再根据其中的 charpter url，获取每一章的内容，并显示。中间出了任何问题，显示错误信息。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>JavaScript Infinite Currying</title>
      <link>https://cjting.me/2016/01/17/javascript-infinite-currying/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2016/01/17/javascript-infinite-currying/</guid>
      <description>&lt;p&gt;很久之前曾看到一个很有意思的 JS 问题，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 定义一个函数 add，满足如下性质：
add(1) == 1
add(1)(2) == 3
add(1)(2)(3) == 6
...

var g = add(1)(2)
g(100) == 103
g(200) == 203
...
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>