<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>assembly on CJ Ting&#39;s Blog</title>
    <link>https://cjting.me/tags/assembly/</link>
    <description>Recent content in assembly on CJ Ting&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 16 Mar 2021 20:13:21 +0800</lastBuildDate><atom:link href="https://cjting.me/tags/assembly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>消失的除法指令：Part1</title>
      <link>https://cjting.me/2021/03/16/the-missing-div-instruction-part1/</link>
      <pubDate>Tue, 16 Mar 2021 20:13:21 +0800</pubDate>
      
      <guid>https://cjting.me/2021/03/16/the-missing-div-instruction-part1/</guid>
      <description>&lt;p&gt;之前学汇编的时候观察到一个现象，我在 C 语言中写了一个函数进行除法操作，但是编译得到的汇编代码中却没有除法指令，取而代之的是一条乘法指令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cjting.me/image/FjCkN1q9ePhijDTEBzws-jI0B7w1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图片对应的 GodBolt 地址在 &lt;a href=&#34;https://gcc.godbolt.org/z/YrK4vnY1E&#34;&gt;这里&lt;/a&gt;，可以看到有一个 &lt;code&gt;imulq&lt;/code&gt; 指令，这是一个乘法指令，乘了一个奇怪的数字 1431655766。&lt;/p&gt;
&lt;p&gt;为什么编译器要这样操作？为什么能这样操作？1431655766 这个数字又是怎么来的？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>编写一个最小的 64 位 Hello World</title>
      <link>https://cjting.me/2020/12/10/tiny-x64-helloworld/</link>
      <pubDate>Thu, 10 Dec 2020 01:13:48 +0800</pubDate>
      
      <guid>https://cjting.me/2020/12/10/tiny-x64-helloworld/</guid>
      <description>&lt;p&gt;Hello World 应该是每一位程序员的启蒙程序，出自于 &lt;a href=&#34;https://en.wikipedia.org/wiki/Brian_Kernighan&#34;&gt;Brian Kernighan&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Dennis_Ritchie&#34;&gt;Dennis Ritchie&lt;/a&gt; 的一代经典著作 &lt;a href=&#34;https://en.wikipedia.org/wiki/The_C_Programming_Language&#34;&gt;The C Programming Language&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// hello.c
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;main&lt;/span&gt;() {
  printf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello, world&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码我想大家应该都太熟悉了，熟悉到可以默写出来。虽然是非常简单的代码，但是如果细究起来，里面却隐含着很多细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/code&gt; 和 &lt;code&gt;#include &amp;quot;stdio.h&amp;quot;&lt;/code&gt; 有什么区别？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdio.h&lt;/code&gt; 文件在哪里？里面是什么内容？&lt;/li&gt;
&lt;li&gt;为什么入口是 &lt;code&gt;main&lt;/code&gt; 函数？可以写一个程序入口不是 &lt;code&gt;main&lt;/code&gt; 吗？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; 的 int 返回值有什么用？是谁在处理 &lt;code&gt;main&lt;/code&gt; 的返回值？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;printf&lt;/code&gt; 是谁实现的？如果不用 &lt;code&gt;printf&lt;/code&gt; 可以做到在终端中打印字符吗？&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
