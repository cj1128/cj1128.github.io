<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MISC on CJ&#39;s Blog</title>
    <link>https://cjting.me/misc/</link>
    <description>Recent content in MISC on CJ&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 May 2017 06:54:46 +0800</lastBuildDate>
    
	<atom:link href="https://cjting.me/misc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>正向代理与反向代理</title>
      <link>https://cjting.me/2018/08/11/forward-proxy-and-reverse-proxy/</link>
      <pubDate>Sat, 11 Aug 2018 18:08:00 +0800</pubDate>
      
      <guid>https://cjting.me/2018/08/11/forward-proxy-and-reverse-proxy/</guid>
      <description>&lt;p&gt;代理的英文叫做 &lt;em&gt;Proxy&lt;/em&gt;，是计算机中的常用软件。&lt;/p&gt;
&lt;p&gt;简单来说，代理的功能犹如它的名字所示：代替某人来处理某事。&lt;/p&gt;
&lt;p&gt;常见的代理分两种，正向代理和反向代理。不管哪种代理，它们都位于客户端和服务器之间，将我们传统的 &lt;code&gt;客户端 &amp;lt;-&amp;gt; 服务器&lt;/code&gt; 通信变成了 &lt;code&gt;客户端 &amp;lt;-&amp;gt; 代理 &amp;lt;-&amp;gt; 服务器&lt;/code&gt; 通信。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 是怎样生成 diff 的：Myers 算法</title>
      <link>https://cjting.me/2017/05/13/how-git-generate-diff/</link>
      <pubDate>Sat, 13 May 2017 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2017/05/13/how-git-generate-diff/</guid>
      <description>&lt;p&gt;diff 是我们每天都要使用的一个功能，每次提交时，我都习惯先用 &lt;code&gt;git diff --cached&lt;/code&gt; 看看这次提交更改了些什么，确定没问题，然后再 &lt;code&gt;git commit&lt;/code&gt;。git 生成的 diff 非常直观，直观到我从来都没有去思考过 diff 是怎么生成的，觉得这应该是很简单的一件事，两个文件做个对比，不就行了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从零开始搭建一个 ELKB 日志收集系统</title>
      <link>https://cjting.me/2016/10/21/build-log-system-with-elkb/</link>
      <pubDate>Fri, 21 Oct 2016 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2016/10/21/build-log-system-with-elkb/</guid>
      <description>&lt;p&gt;当今的软件开发 &lt;strong&gt;多核&lt;/strong&gt; 以及 &lt;strong&gt;分布&lt;/strong&gt; 已经成为了常态，基本上稍大型的应用都是多台机器分布式部署。分布式在提高性能的同时也带来了很多问题，今天我们只讨论一点，那就是如何处理多台机器线上系统的日志。&lt;/p&gt;
&lt;p&gt;以我司的某个应用 T 为例，部署在了百度云 5 台机子上，其中一台拥有公网 IP，使用了百度云提供的负载均衡服务。每次想要在日志中检索某个关键字时，基本步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开五个 SSH，登陆拥有公网 IP 的那台机器&lt;/li&gt;
&lt;li&gt;在另外四个 SSH 中分别登陆其他的内网机器&lt;/li&gt;
&lt;li&gt;对日志文件进行检索&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>使用 Dnsmasq 搭建内网 DNS 服务器</title>
      <link>https://cjting.me/2016/08/20/use-dnsmasq-to-build-own-dns-server/</link>
      <pubDate>Sat, 20 Aug 2016 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2016/08/20/use-dnsmasq-to-build-own-dns-server/</guid>
      <description>&lt;p&gt;在日常开发过程中，我们经常要配置各种
host，比如公司内部的各种服务，或者测试项目的时候暂时把生产环境 URL 配置到本地上等等。一般采取的方法都是每个人手动编辑自己的 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件。这个做法有两个缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动编辑 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件非常麻烦，需要 &lt;code&gt;sudo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;工作量重复，团队内每个人都要配置一遍&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>使用 Ngrok 实现内网穿透</title>
      <link>https://cjting.me/2016/05/21/ngrok-tutorial/</link>
      <pubDate>Sat, 21 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2016/05/21/ngrok-tutorial/</guid>
      <description>&lt;p&gt;很多时候，我们都有这样的需求：需要将本地正在开发的服务暴露在公网上，也就是从外网直接访问我们本机上的服务。正常情况下，这是办不到的，因为我们的本机并没有公网 IP，我们的本机处在内网当中。&lt;/p&gt;
&lt;p&gt;这里需要顺手提及一个知识：NAT 穿透。我们的机器一般都在路由器的内网当中，IP 地址基本上都是 &lt;code&gt;192.168.x.x&lt;/code&gt; 系列，我们并没有公网 IP，那么如何访问外网呢？我们打开浏览器访问 Google，Google 与我们主机之间如何通信？假设我们主机 IP 为 &lt;code&gt;192.168.0.100&lt;/code&gt;，路由器 LAN IP 为 &lt;code&gt;192.168.0.1&lt;/code&gt;，WAN IP 为 &lt;code&gt;211.22.145.234（这是一个公网IP）&lt;/code&gt;，Google 服务器 IP 为 &lt;code&gt;74.125.204.101&lt;/code&gt;，详细通信流程如下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Underhanded C, 有猫腻的 C</title>
      <link>https://cjting.me/2015/06/16/underhanded-c/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2015/06/16/underhanded-c/</guid>
      <description>&lt;p&gt;这一切，都要从这篇文章说起，&lt;a href=&#34;http://www.codersnotes.com/notes/being-sneaky-in-c&#34;&gt;being-sneaky-in-c&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;通过这篇文章，我了解到，原来外国有一种比赛，叫做 &lt;em&gt;Underhanded C&lt;/em&gt;（中文翻译：有猫腻的 C），完成规定的题目，要求是写出看起来毫无问题的代码，但是却偷偷的藏有 Bug 或者说后门。&lt;/p&gt;
&lt;p&gt;这篇文章说的就是作者参与了这个比赛，以及他的解决方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于字符编码</title>
      <link>https://cjting.me/2014/04/24/about-string-encoding/</link>
      <pubDate>Thu, 24 Apr 2014 00:00:00 +0800</pubDate>
      
      <guid>https://cjting.me/2014/04/24/about-string-encoding/</guid>
      <description>&lt;p&gt;很早之前就碰到过&amp;quot;乱码&amp;quot;这个现象，当时非常困惑，完全不能理解发生了什么。&lt;/p&gt;
&lt;p&gt;上大学以后，虽然开始接触计算机，不过我就没看到过具体讲解字符编码的内容。对这个领域始终是感到非常模糊。&lt;/p&gt;
&lt;p&gt;不过，最近好像豁然开朗了一下，感觉突然就明白了这个问题。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>